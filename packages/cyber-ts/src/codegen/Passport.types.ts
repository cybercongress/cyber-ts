/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export interface AddressResponse {
  address: string;
  [k: string]: unknown;
}
export type Expiration = {
  at_height: number;
} | {
  at_time: Timestamp;
} | {
  never: {
    [k: string]: unknown;
  };
};
export type Timestamp = Uint64;
export type Uint64 = string;
export interface AllNftInfoResponseForPassportMetadata {
  access: OwnerOfResponse;
  info: NftInfoResponseForPassportMetadata;
  [k: string]: unknown;
}
export interface OwnerOfResponse {
  approvals: Approval[];
  owner: string;
  [k: string]: unknown;
}
export interface Approval {
  expires: Expiration;
  spender: Addr;
  [k: string]: unknown;
}
export interface NftInfoResponseForPassportMetadata {
  extension: PassportMetadata;
  token_uri?: string | null;
  [k: string]: unknown;
}
export interface PassportMetadata {
  addresses?: LabeledAddress[] | null;
  avatar: string;
  data?: string | null;
  nickname: string;
  particle?: string | null;
  [k: string]: unknown;
}
export interface LabeledAddress {
  address: string;
  label?: string | null;
  [k: string]: unknown;
}
export interface ApprovalResponse {
  approval: Approval;
  [k: string]: unknown;
}
export interface ApprovalsResponse {
  approvals: Approval[];
  [k: string]: unknown;
}
export interface ConfigResponse {
  avatar_subgraph: string;
  name_subgraph: string;
  owner: string;
  proof_subgraph: string;
  [k: string]: unknown;
}
export type Addr = string;
export interface Config {
  avatar_subgraph: Addr;
  name_subgraph: Addr;
  owner: Addr;
  proof_subgraph: Addr;
  [k: string]: unknown;
}
export interface ContractInfoResponse {
  name: string;
  symbol: string;
  [k: string]: unknown;
}
export type ExecuteMsg = {
  execute: {
    msgs: CosmosMsgForCyberMsgWrapper[];
    [k: string]: unknown;
  };
} | {
  create_passport: {
    avatar: string;
    nickname: string;
    signature: Binary;
    [k: string]: unknown;
  };
} | {
  update_name: {
    new_nickname: string;
    old_nickname: string;
    [k: string]: unknown;
  };
} | {
  update_avatar: {
    new_avatar: string;
    nickname: string;
    [k: string]: unknown;
  };
} | {
  update_data: {
    data?: string | null;
    nickname: string;
    [k: string]: unknown;
  };
} | {
  update_particle: {
    nickname: string;
    particle?: string | null;
    [k: string]: unknown;
  };
} | {
  proof_address: {
    address: string;
    nickname: string;
    signature: Binary;
    [k: string]: unknown;
  };
} | {
  remove_address: {
    address: string;
    nickname: string;
    [k: string]: unknown;
  };
} | {
  set_owner: {
    owner: string;
    [k: string]: unknown;
  };
} | {
  set_active: {
    token_id: string;
    [k: string]: unknown;
  };
} | {
  set_subgraphs: {
    avatar_subgraph: string;
    name_subgraph: string;
    proof_subgraph: string;
    [k: string]: unknown;
  };
} | {
  set_address_label: {
    address: string;
    label?: string | null;
    nickname: string;
    [k: string]: unknown;
  };
} | {
  transfer_nft: {
    recipient: string;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  send_nft: {
    contract: string;
    msg: Binary;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  mint: MintMsgForPassportMetadata;
} | {
  burn: {
    token_id: string;
    [k: string]: unknown;
  };
} | {
  approve: {
    expires?: Expiration | null;
    spender: string;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  revoke: {
    spender: string;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  approve_all: {
    expires?: Expiration | null;
    operator: string;
    [k: string]: unknown;
  };
} | {
  revoke_all: {
    operator: string;
    [k: string]: unknown;
  };
};
export type CosmosMsgForCyberMsgWrapper = {
  bank: BankMsg;
} | {
  custom: CyberMsgWrapper;
} | {
  staking: StakingMsg;
} | {
  distribution: DistributionMsg;
} | {
  wasm: WasmMsg;
};
export type BankMsg = {
  send: {
    amount: Coin[];
    to_address: string;
    [k: string]: unknown;
  };
} | {
  burn: {
    amount: Coin[];
    [k: string]: unknown;
  };
};
export type Uint128 = string;
export type CyberMsg = {
  cyberlink: {
    links: Link[];
    neuron: string;
    [k: string]: unknown;
  };
} | {
  investmint: {
    amount: Coin;
    length: number;
    neuron: string;
    resource: string;
    [k: string]: unknown;
  };
} | {
  create_energy_route: {
    destination: string;
    name: string;
    source: string;
    [k: string]: unknown;
  };
} | {
  edit_energy_route: {
    destination: string;
    source: string;
    value: Coin;
    [k: string]: unknown;
  };
} | {
  edit_energy_route_name: {
    destination: string;
    name: string;
    source: string;
    [k: string]: unknown;
  };
} | {
  delete_energy_route: {
    destination: string;
    source: string;
    [k: string]: unknown;
  };
} | {
  create_thought: {
    load: Load;
    name: string;
    particle: string;
    program: string;
    trigger: Trigger;
    [k: string]: unknown;
  };
} | {
  forget_thought: {
    name: string;
    program: string;
    [k: string]: unknown;
  };
} | {
  change_thought_input: {
    input: string;
    name: string;
    program: string;
    [k: string]: unknown;
  };
} | {
  change_thought_period: {
    name: string;
    period: number;
    program: string;
    [k: string]: unknown;
  };
} | {
  change_thought_block: {
    block: number;
    name: string;
    program: string;
    [k: string]: unknown;
  };
} | {
  create_pool: {
    deposit_coins: Coin[];
    pool_creator_address: string;
    pool_type_id: number;
    [k: string]: unknown;
  };
} | {
  deposit_within_batch: {
    deposit_coins: Coin[];
    depositor_address: string;
    pool_id: number;
    [k: string]: unknown;
  };
} | {
  withdraw_within_batch: {
    pool_coin: Coin;
    pool_id: number;
    withdrawer_address: string;
    [k: string]: unknown;
  };
} | {
  swap_within_batch: {
    demand_coin_denom: string;
    offer_coin: Coin;
    offer_coin_fee: Coin;
    order_price: Decimal;
    pool_id: number;
    swap_requester_address: string;
    swap_type_id: number;
    [k: string]: unknown;
  };
};
export type Decimal = string;
export type CyberRoute = "rank" | "graph" | "resources" | "grid" | "dmn" | "bandwidth" | "liquidity";
export type StakingMsg = {
  delegate: {
    amount: Coin;
    validator: string;
    [k: string]: unknown;
  };
} | {
  undelegate: {
    amount: Coin;
    validator: string;
    [k: string]: unknown;
  };
} | {
  redelegate: {
    amount: Coin;
    dst_validator: string;
    src_validator: string;
    [k: string]: unknown;
  };
};
export type DistributionMsg = {
  set_withdraw_address: {
    address: string;
    [k: string]: unknown;
  };
} | {
  withdraw_delegator_reward: {
    validator: string;
    [k: string]: unknown;
  };
};
export type WasmMsg = {
  execute: {
    contract_addr: string;
    funds: Coin[];
    msg: Binary;
    [k: string]: unknown;
  };
} | {
  instantiate: {
    admin?: string | null;
    code_id: number;
    funds: Coin[];
    label: string;
    msg: Binary;
    [k: string]: unknown;
  };
} | {
  migrate: {
    contract_addr: string;
    msg: Binary;
    new_code_id: number;
    [k: string]: unknown;
  };
} | {
  update_admin: {
    admin: string;
    contract_addr: string;
    [k: string]: unknown;
  };
} | {
  clear_admin: {
    contract_addr: string;
    [k: string]: unknown;
  };
};
export type Binary = string;
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export interface CyberMsgWrapper {
  msg_data: CyberMsg;
  route: CyberRoute;
  [k: string]: unknown;
}
export interface Link {
  from: string;
  to: string;
  [k: string]: unknown;
}
export interface Load {
  gas_price: Coin;
  input: string;
  [k: string]: unknown;
}
export interface Trigger {
  block: number;
  period: number;
  [k: string]: unknown;
}
export interface MintMsgForPassportMetadata {
  extension: PassportMetadata;
  owner: string;
  token_id: string;
  token_uri?: string | null;
  [k: string]: unknown;
}
export interface InstantiateMsg {
  avatar_subgraph: string;
  minter: string;
  name: string;
  name_subgraph: string;
  owner: string;
  proof_subgraph: string;
  symbol: string;
  [k: string]: unknown;
}
export interface MinterResponse {
  minter: string;
  [k: string]: unknown;
}
export interface NumTokensResponse {
  count: number;
  [k: string]: unknown;
}
export interface OperatorsResponse {
  operators: Approval[];
  [k: string]: unknown;
}
export interface PortidResponse {
  portid: number;
  [k: string]: unknown;
}
export type QueryMsg = {
  config: {
    [k: string]: unknown;
  };
} | {
  last_portid: {
    [k: string]: unknown;
  };
} | {
  portid_by_nickname: {
    nickname: string;
    [k: string]: unknown;
  };
} | {
  address_by_nickname: {
    nickname: string;
    [k: string]: unknown;
  };
} | {
  passport_by_nickname: {
    nickname: string;
    [k: string]: unknown;
  };
} | {
  metadata_by_nickname: {
    nickname: string;
    [k: string]: unknown;
  };
} | {
  passport_signed: {
    address: string;
    nickname: string;
    [k: string]: unknown;
  };
} | {
  active_passport: {
    address: string;
    [k: string]: unknown;
  };
} | {
  owner_of: {
    include_expired?: boolean | null;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  approval: {
    include_expired?: boolean | null;
    spender: string;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  approvals: {
    include_expired?: boolean | null;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  all_operators: {
    include_expired?: boolean | null;
    limit?: number | null;
    owner: string;
    start_after?: string | null;
    [k: string]: unknown;
  };
} | {
  num_tokens: {
    [k: string]: unknown;
  };
} | {
  contract_info: {
    [k: string]: unknown;
  };
} | {
  nft_info: {
    token_id: string;
    [k: string]: unknown;
  };
} | {
  all_nft_info: {
    include_expired?: boolean | null;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  tokens: {
    limit?: number | null;
    owner: string;
    start_after?: string | null;
    [k: string]: unknown;
  };
} | {
  all_tokens: {
    limit?: number | null;
    start_after?: string | null;
    [k: string]: unknown;
  };
} | {
  minter: {
    [k: string]: unknown;
  };
};
export interface SignatureResponse {
  signed: boolean;
  [k: string]: unknown;
}
export interface TokenInfoForPassportMetadata {
  approvals: Approval[];
  extension: PassportMetadata;
  owner: Addr;
  token_uri?: string | null;
  [k: string]: unknown;
}
export interface TokensResponse {
  tokens: string[];
  [k: string]: unknown;
}